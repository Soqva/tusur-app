export default [
    {
        listElement: 'Boxing и unboxing',
        subListElement: ['Boxing и unboxing. Что это и почему это плохо?'],
        answer: 'Упаковка (boxing) позволяет преобразовать размерный тип в ссылочный. При упаковке объекта размерного типа происходят следующие действия:\n' +
            '1. Выделяется память в управляемой куче.\n' +
            '2. Совершается копирование полей размерного типа в память, которая была выделена в куче.\n' +
            '3. Возвращается адрес объекта.\n' +
            'Процесс извлечения адреса полей из упакованного объекта называется распаковкой (unboxing). В отличие от упаковки при распаковке не происходит никакого копирования, однако обычно вслед за распаковкой следует копирование полей, поэтому обе операции (распаковка и копирование) являются противоположностью операции упаковки.\n' +
            'Упаковка и распаковка/копирование снижают производительность приложения как в плане замедления, так и в расходе дополнительной памяти, поэтому нужно стараться минимизировать создание кода, в котором происходят операции упаковки и распаковки/копирования.\n'
    },
    {
        listElement: 'Классы и структуры',
        subListElement: ['Что такое класс? Что такое структура? В чем отличие между структурой и классом?'],
        answer: 'Для С# классы System.Object, System.Exception, System.File-Stream и System.Random — это ссылочные типы (память выделяется из упр. кучи). В свою очередь размерные типы в документации называются структурами (structure) и перечислениями (enumeration). Например, структуры System.In132, System.Boolean, System.Decimal, System.TimeSpan и перечисления System.DayOfWeek, System.10.FileAttributes и System.Drawing.FontStyle являются размерными типами (хранятся обычно в стеке потока, но могут быть встроены в ссылочные типы).'
    },
    {
        listElement: '.NET, CLR',
        subListElement: ['Что такое .NET? Что такое CLR? Что такое IL?'],
        answer: '.NET — это фреймворк от Microsoft, который позволяет использовать одни и те же пространства имён, библиотеки и API для разных языков.\n' +
            '\n' +
            'CLR ("Common Language Runtime", "общеязыковая исполняющая среда") - это компонент .NET Framework, основной задачей которого является управление интерпретацией и исполнением кода IL. CLR отвечает за изоляцию памяти приложений, проверку типов, безопасность кода, преобразование IL в машинный код.\n' +
            'IL (Intermediate Language) - код, содержащий набор инструкций, не зависящих от платформы. Иными словами, после компиляции исходного кода он преобразуется не в код для какой-то определенной платформы, а в промежуточный код на языке IL.\n'
    },
    {
        listElement: 'String и StringBuilder',
        subListElement: ['Какая разница между классами System.String и System.Text.StringBuilder?'],
        answer: 'Данные, хранящиеся в классе System.String неизменяемые (immutable). Класс System.StringBuilder разрабатывался так, чтобы над изменяемой строкой можно было проделать множество операций. То есть при каждой операции над объектом класса System.String происходит перенос данных в новую область памяти, что влияет на производительность программы.'
    },
    {
        listElement: 'Статические методы',
        subListElement: ['Можно ли объявить перекрытый метод статическим, если перекрываемый метод не является статическим?'],
        answer: 'Нет. Сигнатура виртуального метода должна остаться постоянной, кроме замены ключевого слова virtual на ключевое слово override.'
    },
]
