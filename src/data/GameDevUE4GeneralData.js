export default [
    {
        listElement: 'Garbage Collector',
        subListElement: 'Как работает Garbage Collector?',
        answer: 'Движок строит ссылочный граф, чтобы определить, какие объекты UObject все еще используются, а какие - нет. В корне этого графа находится набор объектов UObject, обозначенных как «корневой набор». Когда происходит сборка мусора, движок может отслеживать все UObject, на которые есть ссылки, путем поиска в дереве известных ссылок на UObject, начиная с корневого набора. Любые UObject без ссылок, то есть те, которые не найдены при поиске по дереву, будут считаться ненужными и будут удалены.\n'
    },
    {
        listElement: 'PlayerController и Pawn',
        subListElement: 'В чем заключается взаимосвязь PlayerController и Pawn?',
        answer: 'PlayerController - это базовый класс для игрока, получающего ввод от пользователя. Сам по себе PlayerController не отображается визуально в окружении, вместо этого он управляет экземпляром Pawn, определяющим визуальное и физическое представление этого игрока в мире. Во время игрового процесса игрок может обладать несколькими разными Pawn (например, транспортным средством или свежей копией Pawn при респауне), а экземпляр PlayerController остаётся одинаковым на протяжении всего уровня. Это важно, потому что в некоторые моменты PlayerController может не обладать вообще никакими Pawn. Это значит, что такие вещи, как открытие меню должны добавляться к PlayerController, а не к классу Pawn.'
    },
    {
        listElement: 'Создание AActor',
        subListElement: 'Как создать AActor?',
        answer: 'Создание AActor немного сложнее, чем создание обычного объекта. Это происходит, потому что AActor должен быть зарегистрирован различными системами (работающих в run-time) — физический движок, менеджер отвечающий за информацию поступающую каждый кадр и т.д. Поэтому, для создания объекта существует метод UWorld::SpawnActor(). '
    },
    {
        listElement: 'Жизненный цикл AActor',
        subListElement: 'Приведите основные события из жизненного цикла AActor.',
        answer: 'BeginPlay - вызывается один раз, когда объект входит в игру\n' +
            'Tick - вызывается каждый кадр, для выполнения кода в течении этого кадра\n' +
            'EndPlay - вызывается, когда объект покидает игру\n'
    },
    {
        listElement: 'UPROPERTY',
        subListElement: 'Для чего используется UPROPERTY?',
        answer: 'UPROPERTY имеет множество вариантов использования, Этот макрос позволяет сделать переменную возможной для репликации, сериализации и доступной из Blueprint. Так же используется сборщиком мусора для отслеживания количества ссылок на UObject.'
    },
]

